#+TODO: TODO WIP LATER | DONE CANCELED
* TODO Findings
http://www.gabriel.urdhr.fr/tags/simgrid/
* Journal
** Week 2 feb 2015
*** Things done
 - added some cross-process MCer/MCed communications (socket based)
 - fixed MCer/MCed synchronisation issues
*** Questions
 - MC_automaton_new_propositional_symbol This should probably be
   handled in the MCer but this function exposes a callback function
   for evaluating a symbol. What should we do about this? Kindly ask
   the MCed to execute the function(s) for us?
*** Work Planned [3/4]
**** DONE proper handling of the message on the server side
 - Some message handling is currently stubbed in the MCer.
**** DONE add missing cross-process MCer/MCed communication
 - ask the MCed to continue its execution
 - inform the MCer that a decision point has been reached
**** DONE start moving some MC algorithms to the MCer process
 - Once the basic communication between the MCer/MCed is in place, we
   can move specific MC algorithms (safety, liveness, comm
   determinism) on the server side.
**** TODO separate source code used by the MCer and the MCed in different files/folders
 - Separing the code in two distinct libraries will ensure that we do
   not access symbols/variables in the wrong process.
** Week 9 feb 2015
*** Things done
 - More cross process MCer/MCer communications
 - MCer-side symbol evaluations (for Promela formulas) implemented as
   variables in the MCed. The more general case where the promula
   formula is implemented as a client-side callback is not implemented
   yet: we would have to trigger the function evaluation from the
   MCer.
 - Partial separation of the MCed API vs MCer API
 - Make the file descriptor snapshoting/restoration logic optional and
   disabled by default: this is often not necessary in our examples
   and it is not implemented (yet) in the split-process mode. The
   split-process implementation needs to be implemented on the MCed
   side with some form on MCer/MCed communication.
 - Merge commits from master
*** Questions
 - The "easy", long, generic part has been done. What remains is:
   - the algorithm-specific parts (liveness, safety, comm. determinism);
   - some support code which relies eavily on the SIMIX data
     structures;
   the remaining boring part is to find a generic, simple, readable,
   lightweight way to tap into the SIMIX data structures from the
   MCer.
*** Work Planned [0/0]
Same as before.
** Week 23 feb 2015
*** Things done
- Remote access to smx_process, simcalls, host names (cached).
- Integration of this modification in in many places.
- (wip) Move the safety algorithm in the MCer process
*** Questions
- Currently all those remote accesses are implemented by reading in
  the MCed process. It might be cleaner to have the MCed process
  signal the MCer process of the changes (use message passing instead
  of reading in the MCed process).
*** Work Planned [4/4]
**** DONE Remote access to proces name
**** DONE Remote access to synchro
**** DONE Finish integration of those modification in all the code
**** DONE Move the safety algorithm in the MCer process
** Week 2 march 2015
*** Things done
- Fix bugs from previous weeks. The new code was not completely active
  so I found out some bugs. Rewrote the commits in order to have a
  clean history. There is still some work to be done around this.
*** Questions
- s_mc_comm_pattern use the host *name* as src_host/dst_host. It might
  be better (more efficient) to use some sort of host identifier
  instead. AFAIK, we don't really have a host identifier. We can
  either use the host name of the address of the host process.
*** Work Planned [1/1]
**** DONE Remote access to host name
** Week 9 march 2015
*** Things done
- Utility functions to read MCed dynar
- Remote access to SIMIX structures
  - simcall_comm_wait__get__comm(r)
  - simcall_comm_test__get__comm(r)
  - simcall_comm_waitany__get__comms(r)
  - simcall_comm_testany__get__comms(r)
  - ...
- Complete remote memory access in mc_state.c
*** Work Planend [1/1]
**** DONE Remote memory access in mc_request.c
** Week 16 march 2015
*** Things done
- Finish to fix all (known) remote memory access issues. Some of them
  probably remain.
*** Questions
 - Currently a quite dumb version approach is used where most of the
   data is read from the other process memory on demand. Will the
   performance impact be negligeable? Do we want to be more clever
   (use caching? fetching complexe data structures with logic on the
   MCed side).
*** Work Planned [1/1]
**** DONE Safety algorithm on the MCer side
 - This was already on the TODO list of week 23 feb 2015. I will
   probably find remaining cross process access issues in the process.
** Week 23 march 2015
*** Things done
 - Port the basix MC safety algorithm in multi-process.
   Some things still needs to be fixed however (snapshot/restore).
*** Questions
**** MCer/MCed communication
The wip version is littered direct reads by the MCer in the MCed address space:
 - reading remote data structures;
 - following pointers in the remote proces;
 - iteration on dynars and swags.

The MCer does not write in the MCed address space (only for snapshot
restoration): the communication is based on message passing.

Directly reading in the MCed memory from the MCer is bad:
 - ugly;
 - not maintainable;
 - tight coupling of the MCer with the MCed (but nearly no coupling of
   the MCed with the MCer -- the MCed is nearly unaware the MCer).

What we currently read from the MCed memory:
  - process list
    - name
    - name of the host
    - simcalls and its associated communications
      - processes (sender, receiver, process waiting on a mutex)
      - content of the buffers
      - MPI tags
  - memory state
    - state of the heap
    - state of the SMPI privatisation
      - which segment is currently mapped in memory
      - position of the SMPI privatisations segments

The process list, process name, host name, simcalls access is
currently wrapped in a not-so-ugly API. Most of the ugliness is
currently related to the communications associated with the simcalls
which is not wrapped in a nicer API.

How do we want to handle this?
 - move all the ugliness in one place and provide a cleaner API for
   consumption by the rest of the MCer code?
 - use shared memory in order to expose a cleaner view (to de defined)
   of the state of the MCed to the MCer?
 - add more messages (to de defined) to synchronize a cleaner view
   of the state?
**** Isolation of the simulated process?
 - Shall we move towards a design were each simulated process is
   isolated in its own process? 
   - [Mt] that would help for SMPI anyway
*** Work Planned [3/3]
**** DONE Fix snapshoting logic and make it work in safety
**** DONE Test and check for remaining issues in the safety path
 - Check all the options
 - Check on different problems and check if we find the same results.
**** DONE Implement the liveness in multi-process
** Week 29 march 2015
*** Things done
- Find why the state comparison code does not work in the new version,
  it was disabled by some other code.
- Fix the state comparison code in cross process mode.
- In the process, I found older regressions in the state comparison
  results: commit 03d36345c4247a907709b86c189a53f5f85bea88 brings an
  increased number of states. Some states which were taken as similar
  are now different. The modification responsible for this difference
  can be traced back to the `xbt_cfg_register()` calls which leads to
  new instances of "Local variable comm () in frame
  simcall_BODY_comm_wait is different between snapshots". The MC have
  a lot of difficulty to compare s_smx_synchro (because of the union):
  if we could fix this in the future (by using a custom code for
  comparing s_smx_synchro) we might have more stable state comparison
  (and less explored states).
*** Work Planned [0/0]
** Week 05 april 2015
*** Things done
- Moved the liveness code in multi-process.
- Moved the comm determinism code in multi-process (wip, broken).
*** Work Planned [2/2]
**** DONE Fix the comm determinism to work in multi-process
**** DONE Kill the single process path and cleanup
This will lead to a huge simplification of the code. Then, it will be
possible to split the code in different directories (for the MCed, for
the MCed, for both).
** Week 13 april 2015
*** Things done
- Finished to move all the code in split process.
- WIP cleanup of the code:
  - remove the entangled MCed/MCer code;
  - switch some parts to C++ (classes, methods, STL).
*** Work Planned [1/2]
**** DONE Remove the heap juggling (wip)
**** WIP C++ification
** Week 27 april 2015
*** Things done
- Remove the multiple heap, heap juggling code.
- First Simgrid Community Tuesday: ðŸ˜€
  - Fix test-smpi-mpich3-attr-raw.
  - Disable the test msg-exception-thread (which cannot pass on most machines).
  - Fix gforge issue #1156, "xbt-dict regresion test missing when keys are not null-terminated"
  - Investigate #18874 "memory leak using the Java binding" (looks normal)
*** Questions
- Now that we do not need to use multiple heaps anymore we might use
  another malloc implementation (jemalloc?) as long as we are able to
  have a look at its structure. Is there any off-the-shelf (more
  efficient) malloc implementation which can expose the relevant
  information to the caller?
** Week 7 may 2015
*** Things done
- Fix the build on the CI servers.
- Fix the tests on the CI servers.
** Week 25 may 2015
*** Things done
- Code cleanup and C++-ification of some parts of the code.
  - Replaced the C-based virtual-tables with C++ ones by making
    Process, Snapshot, AddressSpace classes.
- Fix some bugs found in the process.
- Fix build/test errors on the CI machines.
- Add documentation on the model-checker.
*** Work Planned [0/3]
**** TODO Rerun previous experiments (from the papers)
In order to see how things evolved (results, bugs, performance) with
the modifications:
 - split process;
 - SMPI mutex on messages.
**** TODO Investigation the barrier bug
See what we can infer from the model-checker?
**** TODO Use ISP and compare it with simgrid
** Week 1 june 2015
*** Things done
- Update MC 101
- Boost.Context integration
- Fix CI erros (clang, etc.)
- Minor usability enchancements to the model-checker
  - Do not abort;
  - Add more informations about what's happening (do not silentely terminate);
  - Enable record/replay in liveness mode (it was only working in safety mode).
- Read about ISP and DMA (DAMPI?).
** Week 15 june 2015
*** Things done
- Fix compilation/continuous integration on MacOS X
- Fix continuous integration in general
- Boost contexts
  - add parallel execution
  - add newer versions of boost
- Fix the kademlia bug: it was related non-synchronized concurrent
  modification.
- (wip) Working on the on-off test and the related bugs.
*** Work Planned [1/1]
**** DONE Fix the on-off code
** Week 22 june 2015
*** Things done
- Fix the segfaults in simterpose. They were related to buggy handling
  of file descriptors:
  - there was a maximum FD value that could be handled by the code;
  - using a FD value higher than this would use pointer to random memory area;
  - valgtind uses FD in the higher range (65535 and below) for its own
    purpose which triggered the bug;
- Some other enhancements in Simterpose.
- (wip) Working on the on-off test and the related bugs
  (https://github.com/mquinson/simgrid/issues/7): should we fix this
  at the SURF, SIMIX error, SIMIX exception layer?
** Week 20 june 2015
*** Things done
**** Read papers about ISP and DAMPI
- ISP"(In-situ Partial Order),
  http://formalverification.cs.utah.edu/ISP-Release/)
- DAMPI (Distributed Analyzer for MPI,
  https://github.com/soarlab/DAMPI)
- They both focus exclusively on MPI applications.
- Supposed to be push-button.
- Use the PMI (ISP) or P^nMPI (DAMPI) interface to plug dynamic
  verification in an existing MPI implementation (MPICH2, OpenMPI).
- ISP uses a centralized scheduler.
- DAMPI uses a decentralized scheduling which leads to a better
  usage of the cluster.
- POE (Partial Order Reduction avoiding Elusive interleavings)
- Use the knowledge of collective functions to avoid the
  combinatorial (N!) explosion when traversing a collective.
- Rexecution from MPI_Init().
- POE: how does it compare wrt POR, DPOR?
- GUI integration
  (http://formalverification.cs.utah.edu/ISP-Eclipse/):
  - visualisation of matching MPI calls (MPI_Send and MPI_Recv)
**** Fixed the first half of the host-on-off bug.
*** Work Planned [1/1]
**** DONE Reference count bug in the host-on-off test
- See https://github.com/mquinson/simgrid/issues/7.
- The comm object is decremented 3Ã— but has only been incremented 2Ã—.
** Week 6 july 2015
*** Things done
**** Bibliography
***** Dwymer et al specification patterns
- Papers:
 - Patterns in property specifications for finite-state verification (Dwymer et al)
 - Property specification patterns for finite-state verification (Dwymer et al)
- Website with all the details of the patterns:
 - http://patterns.projects.cis.ksu.edu/
- Specification of temporal properties abstracted from the lower level
  language (LTL, CTL, QRE, GIL, INCA, ACTL, â€¦).
- Scope, when we want to check the property
  - Global
  - BEfore Q
  - After Q
  - Before Q and R
  - After Q and R
- Patterns
  - Precedence (S precedes P)
  - Absence
  - Universality
  - Existence
  - Bounded existence
  - Follows
  - Chaine Precedence
  - Chain Response
- For each element of (scopeÃ—patternÃ—language), a mapping is defined
  manually.
***** A Compositional Automata-based Semantics for Property Patterns (Castillos et al)
- Dwymer scope/pattern language:
  - lack of composability
  - lack of extensibility
  - combinatorial explosion (scopeÃ—pattern)
- Proposition:
  - composable scope/pattern definition based on BÃ¼chi automatons
- Pattern:
  - BÃ¼chi automaton where the transitions are labeled with state propositions
- Scope:
  - special BÃ¼chi automaton with a "composition state" cs representing
    the pattern
  - the cs can be an accepting state
- Define a composition operation between the pattern automaton and the
  scope automaton.
**** Fixed the host-on-off bug
At last!
**** Fixing bug (CI/release)
We have green lights on Linus without Modelchecking:
- Some issues with MacOS X and FreeBSD.
- Model-Checker:
  - Use new systcall/feature from the kernel not available on some OSes.
  - Seems broken on 32 bit.
  - Some weird bugs show up on unrelated tests when MC is compiled-in
    (for example test-smpi-mpich3-thread-f90).
**** Client/server (HTTP) SimGrid
- Which design?
  - Remote MSG/SMPI?
  - based on replay with a Simgrid/server-side plugin?
  - As a user, I probably don't want to write a plugin. Especially if
    I'm programming in Java and have to write the plugin in C or C++.
- Synchronization between the application threads, HTTPd thread(s),
  the in-SimGrid stub contexts and Maestro.
  - Communication bewteen the subs and the HTTPd threds using native
    system synchronization techniques. I think, it should be
    allright :)
  - At some point we could get rid of the
- We don't want to link against native libsimgrid in the client
  (especially if it's a Java/Python/Ruby/Lua/JavaScript application)
  so the API must be simple.
** Week 13 july 2015
*** Things done
- Fix MC for 32 bit.
- Add some documentation for release.
- Code cleanup in the MC:
  - Remove useless bits;
  - C++ification of some code.
** Week 20 july 2015
*** Things done
- Cleanup, C++ification of the MC codebase.
- Prepration for release (fix bugs, fix CI)
** Week 27 july 2015
*** Things done
- Cleanup, C++ification of the MC codebase.
- Prepration for release (fix bugs, fix CI)
- Some ISP Umpire test do not finish anymore:
  - Since 51a5d2e12715401658d5416f621fb5c89a9b5278 Add a mutex to lock access to the SMPI mailboxes
  - Reverting this commit feature fixes the test on master.
  - I'm not sure why this happens yet.
  - However, we should probably handle SIMCALL_MUTEX_* in the MC (?):
    they are supposed to influence the message ordering and they are
    currently ignored in the interleavings.
  - Same for SIMCALL_COND_*, SIMCALL_SEM_*â€¦
  - Lot of work do do?
  - We should probably abort on simcalls by default an then add the
    proper behaviour for simcalls we know we handle in MC: this would
    avoid handling simcalls incorrectly.
** Week 27 august 2015
*** Things done
- Fix broken umpire test (no-erro2 and friends):
  - they did not terminate anymore;
  - regression introduced by the locks around the SMPI messages (see
    smpi_base.c and commit 51a5d2e12715401658d5416f621fb5c89a9b5278);
  - MUTEX_LOCK simcall does not seem to be handled correctly by DPOR
    (see the mutex-handling tests) and those tests are using DPOR (it
    is used by default);
  - I change the code of SMPI to avoid the lock when the
    smpi/async_small_thres threshold is 0: it should not be necessary
    in this case anyway. This fixes the broken umpire tests.
- Fixing the handling of SIMCALL_MUTEX_LOCK in DPOR:
  - Using DPOR with a dummy dependency function D(t,t-) = true (with
    the mutex-handling test ) visits more states than without
    reduction (!): there's something wrong here.
  - SIMCALL_MUTEX_TRYLOCK is not handled by the MC (it is not
    considered visible);
  - SIMCALL_MUTEX_UNLOCK is considered non-visible: is this really
    correct?
*** Work Planned [1/2]
**** CANCELED Try a MacOS X MC port
Test how MMU based snapshoting work (probably not so well).
**** LATER Mutex-aware DPOR
** Week 31 August 2015
*** Things done
Tried the MacOS X prot:
- not in good shape;
  - the plan was to avois spending to much time on this and drop it if
    it was taking too much time;
  - therefore, we should drop this;
- many small issues fixed;
- DWARF support:
  - libdw is currently used but only reads DWARF from ELF;
  - libdwarf can handle DWARF section from any kind of file;
  - however the API of libdwarf and libdw is completely incompatible;
  - ~700 LoC of DWARF processing needs to be rewritten&;
  - I tries to make a compatibility layer but it was a mess, much
    simpler to rewrite the code;
- custom malloc:
  - there is special support for this in MacOS X;
  - by overriding the function pointers in the default zone we should
    be able to achieve this;
  - currently not working however;
- MacOS X issues:
  - libtool is not willing to generate shared objects files (for
    libelf and libdwarf);
  - currently the debugger are not willing to cooperate with me :)
- Not touched yet;
  - get the list of VMAs
  - implement CoW snapshot
*** Work Planned [1/2]
**** DONE Fix Jenkins
**** TODO Work on ISP testsuite
** Week 7 September 2015
*** Things done
- Fix CI:
  - Fix LTO witht the different versions of GCC (was broken on travis);
  - Add a FreeBSD 10 jenkins node, remove FreeBSD 9 and kill the C++
    library switching code in cmake script
  - Fix code for FreeBSD 10
- Backport some fixes from the experimental MacOS X MC branch
  into master.
- Try to fix Windows build on Jenkins.
  - At some point, we should probably try to make it work with
    VisualStudio.
- Working on MacOS X without DWARF:
  - The idea was that we might take snaphot out of SimGridMC for the
    evaluation of the different snapshoting strategies.
  - As DWARF is only used for comparing the snapshots, we might as
    well evaluate on exhaustive explorations.
  - A simple solution is to always return "different" in the
    comparison function.
  - We might then add DWARF support if we have time for this.
  - In master, I should move all the libdw related code into a .c file
    (mc_libdw.c) and move all the libdw-independent code out of this
    file.  This would make this kind of things easier (porting to
    libdwarf, disabling DWARF support).
*** Work plannes [1/1]
**** CANCELED SimGridMC on MacOS X without DWARF
** Week 14 September 2015
*** Things done
- Work on MacOS X without DWARF => canceled
- Remove the intrusive base members in SURF: it seems MSVC like the
  member hooks better.
** Week 21 September 2015
*** Things done
- Reproducible experiments for snapshots:
  - some patches in SimGrid for the experiments;
  - script for launching the experiments;
  - data post-processing.
** Week 28 September 2015
*** Things done
- Rebase/port the experiments in the current branch
  - Bring back some features which were removed to the split-process
    model (KSM, soft-dirty).
  - Issues:
    - Memory corruption! (malloc)
    - Sometimes, the MC takes a lot of time.
    - Probably related to the memory corrutpion.
- (wip) Fix the memory corruption
*** Work planned [2/2]
**** DONE Fix memory corruption
**** DONE Launch the experiments with split process
** Week 5 October 2015
*** Things done
**** Fix the memory corruption
- Spent some time trying to locate the bug in the git history but it
  kept appearing and disappearing randomly.
- Finally, used valgrind and found the issue: valgrind now works on
  MC!
- However after fixing the issue the liveness test does not
  terminate anymore. We should probably spend time fixing the state
  comparison code which is quite big, difficult to read and needs
  fixing.
**** Ran the MC test suite on valgrind
- in order to find additional issues:
- Found a minor memory leak (called only a few times at
  initialisation).
**** Fixed another issue with DWARF-based location of variables.
**** Cleanup of the MC code.
**** Look at problem with state comparison code
- It seems we have problems with the state comparion code which seems
  buggy:
- now:
  - bugged2                                   => PROPERTY NOT VALID
  - bugged2 --cfg=model-check/visited:1000000 => no error
- before the fix      => same
- before the MC split => PROPERTY NOT VALID in both cases
- The MC code needs a lot of cleanup and better testing.
**** Snapshot experiments in split process MC
- Run the snapshot experiments on the split-process version of the MC
- Single-process:
    name            np  type       states  clock    max       mem
    dup             2   plain      109     1.82     445.80    474.09
    dup             2   KSM        109     1.97     448.15    396.55
    dup             2   page       109     1.80     314.67    335.31
    dup             2   page+soft  109     1.96     314.52    336.32
    dup             3   plain      453     3.72     770.03    793.09
    dup             3   KSM        453     4.42     741.89    484.95
    dup             3   page       453     3.89     332.80    352.23
    dup             3   page+soft  453     4.25     333.18    352.04
    dup             4   plain      2751    56.21    3239.18   3249.12
    dup             4   KSM        2751    60.71    3070.91   1068.41
    dup             4   page       2751    64.23    655.15    654.38
    dup             4   page+soft  2751    65.92    658.56    656.88
    groupcreate     2   plain      13      1.43     327.20    329.52
    groupcreate     2   KSM        13      1.46     327.62    328.63
    groupcreate     2   page       13      1.43     314.14    310.06
    groupcreate     2   page+soft  13      1.45     314.04    311.68
    groupcreate     3   plain      85      1.81     402.02    408.04
    groupcreate     3   KSM        85      1.96     403.40    351.82
    groupcreate     3   page       85      1.87     314.07    317.66
    groupcreate     3   page+soft  85      1.96     314.07    317.77
    groupcreate     4   plain      1360    47.46    1983.48   1987.39
    groupcreate     4   KSM        1360    49.31    1899.27   495.59
    groupcreate     4   page       1360    53.32    449.58    451.26
    groupcreate     4   page+soft  1360    54.72    451.14    450.53
    sendrecv2       2   plain      1990    15.94    3290.00   3295.64
    sendrecv2       2   KSM        1990    19.01    3093.88   1245.95
    sendrecv2       2   page       1990    17.31    507.29    509.09
    sendrecv2       2   page+soft  1990    18.50    509.75    510.63
    op_commutative  3   plain      86      1.86     404.49    408.15
    op_commutative  3   KSM        86      1.97     405.97    350.70
    op_commutative  3   page       86      1.87     314.72    317.37
    op_commutative  3   page+soft  86      1.91     314.56    316.80
    op_commutative  4   plain      1422    49.47    2285.04   2289.50
    op_commutative  4   KSM        1422    51.01    1983.49   500.66
    op_commutative  4   page       1422    54.79    454.09    452.76
    op_commutative  4   page+soft  1422    56.35    455.67    454.04
    op_commutative  5   plain      11471   2184.03  13874.50  13898.13
    op_commutative  5   KSM        11471   2176.23  13090.33  2006.66
    op_commutative  5   page       11471   2482.88  1823.95   1824.65
    op_commutative  5   page+soft  11471   2514.31  1838.00   1839.66
- Split process:
    name            np  type       states  clock   max      mem
    dup             2   plain      117     1.77    254.00   278.77
    dup             2   KSM        117     1.80    253.89   155.75
    dup             2   page       117     1.83    116.40   129.73
    dup             2   page+soft  117     1.68    116.35   129.18
    dup             3   plain      764     10.82   854.40   874.09
    dup             3   KSM        764     11.47   855.38   199.03
    dup             3   page       764     11.08   130.05   149.48
    dup             3   page+soft  764     10.44   130.31   145.20
    dup             4   plain      4117    70.83   3410.55  3427.15
    dup             4   KSM        4117    75.37   3412.69  462.72
    dup             4   page       4117    73.24   262.04   272.71
    dup             4   page+soft  4117    69.61   261.93   272.71
    groupcreate     2   plain      13      0.81    125.00   138.23
    groupcreate     2   KSM        13      0.80    125.68   137.57
    groupcreate     2   page       13      0.80    116.36   121.56
    groupcreate     2   page+soft  13      0.79    116.30   121.55
    groupcreate     3   plain      111     1.95    233.83   251.38
    groupcreate     3   KSM        111     2.03    233.98   141.84
    groupcreate     3   page       111     1.98    116.28   123.98
    groupcreate     3   page+soft  111     1.89    116.43   123.37
    groupcreate     4   plain      1122    18.22   1032.96  1049.35
    groupcreate     4   KSM        1122    19.55   1034.56  227.52
    groupcreate     4   page       1122    18.76   139.40   153.88
    groupcreate     4   page+soft  1122    17.84   139.46   150.30
    sendrecv2       2   plain      357     3.70    572.99   587.48
    sendrecv2       2   KSM        357     3.94    573.77   201.78
    sendrecv2       2   page       357     3.73    116.26   130.88
    sendrecv2       2   page+soft  357     3.46    116.40   129.54
    op_commutative  3   plain      112     1.96    236.14   253.91
    op_commutative  3   KSM        112     2.04    236.11   140.17
    op_commutative  3   page       112     1.99    116.33   124.16
    op_commutative  3   page+soft  112     1.90    116.35   123.67
    op_commutative  4   plain      1239    21.43   1158.04  1170.32
    op_commutative  4   KSM        1239    22.63   1159.80  252.58
    op_commutative  4   page       1239    22.03   144.21   158.47
    op_commutative  4   page+soft  1239    21.02   144.09   154.51
    op_commutative  5   plain      7309    137.67  5414.60  5434.70
    op_commutative  5   KSM        7309    146.77  5419.93  621.50
    op_commutative  5   page       7309    142.31  387.36   398.13
    op_commutative  5   page+soft  7309    136.25  387.38   398.57
- The difference in terme of time is not so significant.
- In the new version, soft-dirty is always faster. Previously, we
  found that soft-dirty was slower.
  - A difference is that, we now need to use syscalls in order to
    read/write from the simulated process memory.
  - We generate extra page faults but we avoid some syscalls and
    remote-process memory accesses.
**** Look at the ISP testsuite
- http://formalverification.cs.utah.edu/ISP_Tests/
- Some deadlocks are found by ISP but not by SimGridMC:
  - mc-umpire-any_src-can-deadlock7
  - mc-umpire-any_src-can-deadlock8
  - mc-umpire-any_src-can-deadlock9
  - mc-umpire-any_src-can-deadlock11
  - mc-umpire-collective-misorder2
  - mc-umpire-comm-bcast-deadlock
  - mc-umpire-comm-deadlock
  - mc-umpire-dropped-req
- We find a deadlock in the main version but not in the modified
  one:
  - mc-umpire-any_src-can-deadlock4_mod
  - mc-umpire-any_src-can-deadlock5_mod
  - mc-umpire-any_src-can-deadlock6_mod
  - mc-umpire-any_src-can-deadlock10_mod
- ISP does not find a deadlock and we don't terminate:
  - mc-umpire-irecv-isend-ok2
    - ISP only finds one interleaving.
    - We are lost in an ocean of interleavings.
    - Still does not terminate if we remove the MPI_Barrier.
    - Could it be related to MPI_Finalize?
      - which makes a xbt_barrier_waitâ€¦
      - which makes xbt_mutex_* (simcall_mutex_*) and xbt_cond_*
        (simcall_cond_*) operations.
- Some tests are expected to have deadlocks (?, AFAIU) but ISP do
  not find them and neither do we:
  - any_src-deadlock
  - any_src-can-deadlock
  - any_src-can-deadlock2
  - any_src-can-deadlock3
** Week 09 November 2015
***  Things done
**** ptrace the model-checked application
- This way we can detect the crash of the application and still get
  its state at the moment of the crash.
- But GDB cannot attach the model-checked application anymore. We
  would have to either implement the GDB protocol in the model-checker
  or PTRACE_DETACH it in order to let GDB PTRACE_ATTACH.
**** Fix SMPI privatization in the model-checker
- The support for SMPI privatization in split-process MC was still to
  be done. The application did not switch to the correct privatization
  segment when restoring the application state.
**** Cleanup
- Remove useless things from the single-process era.
*** Work Planned [0/1]
**** TODO State comparison "broken"
- Appeared after a fix of a off-by-one bug. This fix seems legit: we
  are actually more correct now.
- The liveness tests are broken as a result.
- Probably a lot of work to cleanup/rewrite the state comparison code.
**** TODO See why we explore a lot more interleavings than ISP
- â€¦even on simple test.
- Try to understand a very simple test such as irecv-isend-ok. Why
  does ISP explore only one interleaving of irecv-isend-ok and
  SimGridMC explores loads of them? Even if we comment the MPI_Barrier
  calls (and do not have any collectives).
- Another difference is that ISP handles the collectives as one
  operation whereas we tend to generate a lot of interleavings in the
  collectives (but this does not explain those simple test cases).
** Week 16 November 2015
*** Things done
**** Try to understand why we explore a lot more interleavings than ISP
***** irecv-isend-ok
- ISP: 1 interleaving (np=3, with barriers)
- With DPOR:
  np    barrier   #interleavings
  ------------------------------
  2           N                1
  3           N                1
  ------------------------------
  2           Y                2
  3           Y                6
- Nothing relevant here.
- The difference is related to the fact that ISP do not model-check
  inside the collectives and we do.
***** irecv-isend-ok2
- ISP: 1 interleaving (np=3, req_count=20, with barriers)
- req_count=1 is irecv-isend-ok
- With DPOR:
  np  req_count   barrier   #interleavings
  ----------------------------------------
  2           1         N                1
  3           1         N                1
  2           2         N                2
  3           2         N                1
  2           3         N                4
  3           3         N                2
  ----------------------------------------
  2           1         Y                2
  3           1         Y                6
  2           2         Y                4
  3           2         Y               12
  2           3         Y                8
  3           3         Y               24
***** Simcall visibility (MC_request_is_visible):
- Are considered visible:
  - COMM_ISEND
  - COMM_IRECV
  - COMM_WAIT and COMM_WAITANY
  - COMM_TEST and COMM_TESTANY
  - MC_RANDOM
  - MUTEX_LOCK and MUTEX_TRYLOCK
- This program executes without interleaving:
  - P1: ISEND(P2); WAIT();
    P2: IRECV(P1); WAIT();
- COMM_WAIT:
  - Without reduction, I guess we could make COMM_WAIT execute as soon
    as they are enabled (we do not need to interleave hem): they could
    be considered invisible.
  - With DPOR, this is not clear at all.
  - COMM_WAIT timeouts needs to be interleaved.
  - Note: COMM_WAIT without timeout is not co-enable with COMM_SEND or
    COMME_RECV.
***** Simcall independance (MC_request_depend)
- used by DPOR to make the reduction
** Week 23 November 2015
*** Things done
**** Untangling the platform instanciation code and the XML processing code
  - two layers of callbacks involved:
    - sg_platf_foo_cb
      - C-based
      - apparently designed to be a SAX-like interfacee for the
        processing the XML (platform/deployment) files
    - fooCreatedCallbacks
      - C++-based (boost::signals2 or libsig++)
      - apparently designed to plug features in the simulator
  - Problems:
    - complicated
    - many features/plugins are using the first interface and should
      probably use the second one
    - the ordering of the base callbacks is relevant (changing them
      segfaults the application)
  - Goal:
    - move things to the C++ interface
    - try to remove the C interface (and hardcode the SAX calls)
    - try to hardcore the basic features of the C++ callbacks (their
      order of execution cannot be changed anyway)
    - have a nice API for the lua bindings
  - A large part has been done. Some bits remainings.
**** C++-ification of the context
- This is currently OO (with vtables) implemented in C: use C++
  classes and virtual methods to express the same thing.
- Done: Thread, Boost, System V
- Wip: Raw
- TODO: Java
- TODO?: CoJava
** Week 15 December 2015
*** Things done
- Migration of MSG, Java bindings to C++
  - This was necessary in order to be able to call the new C++ Host
    API directly
- Extendable plugin system to replace xbt_lib
  - xbt_lib is confusing to use
  - can be used to plug the different layers/plugins code
- Creation of simgrid::Host for sg_host_t instead of using xbt_lib
** Week 4 Januay 2015
*** Things done
- Move simcall directly in the Host methods:
  - Using simgrid::simix::kernel() / RUN_KERNEL for simple ones
    - removal of many simcalls merged into this one
  - For more comples ones using: simgrid::simix::simcall()
    - C++ templated function to issue a simcall
*** Work Planned [3/4]
**** DONE Rewrite the Energy plugin
- use Extendable
- better architecture
**** DONE Remove layers of indirections in the simgrid::Host and rearchitecture
- eg:
  - host->setPstate(pstate_index) (simgrid::Host)
  - ... calls SIMIX_host_set_pstate(host, pstate_index)
  - ... calls surf_host_set_pstate(host, pstate_index)
  - ... calls host->p_cpu->setPState(pstate_index)
- have host::setPstate() call Cpu::setPstate() directly
- either remove the intermediate calls or make delegate to Host::setPstate()
**** DONE Avoid simcall for getter when possible in simgrid::Host
Getters usually do not need to issue a simcall and could get the data directly.
**** TODO Remove code from simgrid::surf::Host?
- Remove simgrid::surf::Host?
- Do we need this to make the distinction between the user API and the internal SURF API?
** Week 14 Januay 2015
*** Things done
- Rewrite energy plugin (C++ style, using the extensions mechanism)
- Fix segfault when compiling with optimisations
- Cleanup/remove lots of intermediate/useless functions
- Move signals out of surd::Host (into simgrid::Host)
- Remove sg_platf_link_add_cb and sg_platf_postparse_add_cb
- Merge simgrid::Host into simgrid::s4u::Host

*** Work Planned [1/5]
**** TODO simgrid::s4u::As*
**** TODO work on Async
- Have a common interface for execuions, comunications, disks, etc.
**** TODO Cleanup surf::Link and its descendants
**** TODO Cleanup addTrace()
* Abbreviations
 - MC: model-checking, model-check
 - MCer: model-checker
 - MCed: model-checked application
