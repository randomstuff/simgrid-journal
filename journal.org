#+TODO: TODO WIP | DONE CANCELED
* TODO Findings
http://www.gabriel.urdhr.fr/tags/simgrid/
* Journal
** Week 2 feb 2015
*** Things done
 - added some cross-process MCer/MCed communications (socket based)
 - fixed MCer/MCed synchronisation issues
*** Questions
 - MC_automaton_new_propositional_symbol This should probably be
   handled in the MCer but this function exposes a callback function
   for evaluating a symbol. What should we do about this? Kindly ask
   the MCed to execute the function(s) for us?
*** Work Planned [3/4]
**** DONE proper handling of the message on the server side
 - Some message handling is currently stubbed in the MCer.
**** DONE add missing cross-process MCer/MCed communication
 - ask the MCed to continue its execution
 - inform the MCer that a decision point has been reached
**** DONE start moving some MC algorithms to the MCer process
 - Once the basic communication between the MCer/MCed is in place, we
   can move specific MC algorithms (safety, liveness, comm
   determinism) on the server side.
**** TODO separate source code used by the MCer and the MCed in different files/folders
 - Separing the code in two distinct libraries will ensure that we do
   not access symbols/variables in the wrong process.
** Week 9 feb 2015
*** Things done
 - More cross process MCer/MCer communications
 - MCer-side symbol evaluations (for Promela formulas) implemented as
   variables in the MCed. The more general case where the promula
   formula is implemented as a client-side callback is not implemented
   yet: we would have to trigger the function evaluation from the
   MCer.
 - Partial separation of the MCed API vs MCer API
 - Make the file descriptor snapshoting/restoration logic optional and
   disabled by default: this is often not necessary in our examples
   and it is not implemented (yet) in the split-process mode. The
   split-process implementation needs to be implemented on the MCed
   side with some form on MCer/MCed communication.
 - Merge commits from master
*** Questions
 - The "easy", long, generic part has been done. What remains is:
   - the algorithm-specific parts (liveness, safety, comm. determinism);
   - some support code which relies eavily on the SIMIX data
     structures;
   the remaining boring part is to find a generic, simple, readable,
   lightweight way to tap into the SIMIX data structures from the
   MCer.
*** Work Planned
Same as before.
** Week 23 feb 2015
*** Things done
- Remote access to smx_process, simcalls, host names (cached).
- Integration of this modification in in many places.
- (wip) Move the safety algorithm in the MCer process
*** Questions
- Currently all those remote accesses are implemented by reading in
  the MCed process. It might be cleaner to have the MCed process
  signal the MCer process of the changes (use message passing instead
  of reading in the MCed process).
*** Work Planned [4/4]
**** DONE Remote access to proces name
**** DONE Remote access to synchro
**** DONE Finish integration of those modification in all the code
**** DONE Move the safety algorithm in the MCer process
** Week 2 march 2015
*** Things done
- Fix bugs from previous weeks. The new code was not completely active
  so I found out some bugs. Rewrote the commits in order to have a
  clean history. There is still some work to be done around this.
*** Questions
- s_mc_comm_pattern use the host *name* as src_host/dst_host. It might
  be better (more efficient) to use some sort of host identifier
  instead. AFAIK, we don't really have a host identifier. We can
  either use the host name of the address of the host process.
*** Work Planned [1/1]
**** DONE Remote access to host name
** Week 9 march 2015
*** Things done
- Utility functions to read MCed dynar
- Remote access to SIMIX structures
  - simcall_comm_wait__get__comm(r)
  - simcall_comm_test__get__comm(r)
  - simcall_comm_waitany__get__comms(r)
  - simcall_comm_testany__get__comms(r)
  - ...
- Complete remote memory access in mc_state.c
*** Work Planend [1/1]
**** DONE Remote memory access in mc_request.c
** Week 16 march 2015
*** Things done
- Finish to fix all (known) remote memory access issues. Some of them
  probably remain.
*** Questions
 - Currently a quite dumb version approach is used where most of the
   data is read from the other process memory on demand. Will the
   performance impact be negligeable? Do we want to be more clever
   (use caching? fetching complexe data structures with logic on the
   MCed side).
*** Work Planned [1/1]
**** DONE Safety algorithm on the MCer side
 - This was already on the TODO list of week 23 feb 2015. I will
   probably find remaining cross process access issues in the process.
** Week 23 march 2015
*** Things done
 - Port the basix MC safety algorithm in multi-process.
   Some things still needs to be fixed however (snapshot/restore).
*** Questions
**** MCer/MCed communication
The wip version is littered direct reads by the MCer in the MCed address space:
 - reading remote data structures;
 - following pointers in the remote proces;
 - iteration on dynars and swags.

The MCer does not write in the MCed address space (only for snapshot
restoration): the communication is based on message passing.

Directly reading in the MCed memory from the MCer is bad:
 - ugly;
 - not maintainable;
 - tight coupling of the MCer with the MCed (but nearly no coupling of
   the MCed with the MCer -- the MCed is nearly unaware the MCer).

What we currently read from the MCed memory:
  - process list
    - name
    - name of the host
    - simcalls and its associated communications
      - processes (sender, receiver, process waiting on a mutex)
      - content of the buffers
      - MPI tags
  - memory state
    - state of the heap
    - state of the SMPI privatisation
      - which segment is currently mapped in memory
      - position of the SMPI privatisations segments

The process list, process name, host name, simcalls access is
currently wrapped in a not-so-ugly API. Most of the ugliness is
currently related to the communications associated with the simcalls
which is not wrapped in a nicer API.

How do we want to handle this?
 - move all the ugliness in one place and provide a cleaner API for
   consumption by the rest of the MCer code?
 - use shared memory in order to expose a cleaner view (to de defined)
   of the state of the MCed to the MCer?
 - add more messages (to de defined) to synchronize a cleaner view
   of the state?
**** Isolation of the simulated process?
 - Shall we move towards a design were each simulated process is
   isolated in its own process? 
   - [Mt] that would help for SMPI anyway
*** Work Planned [3/3]
**** DONE Fix snapshoting logic and make it work in safety
**** DONE Test and check for remaining issues in the safety path
 - Check all the options
 - Check on different problems and check if we find the same results.
**** DONE Implement the liveness in multi-process
** Week 29 march 2015
*** Things done
- Find why the state comparison code does not work in the new version,
  it was disabled by some other code.
- Fix the state comparison code in cross process mode.
- In the process, I found older regressions in the state comparison
  results: commit 03d36345c4247a907709b86c189a53f5f85bea88 brings an
  increased number of states. Some states which were taken as similar
  are now different. The modification responsible for this difference
  can be traced back to the `xbt_cfg_register()` calls which leads to
  new instances of "Local variable comm () in frame
  simcall_BODY_comm_wait is different between snapshots". The MC have
  a lot of difficulty to compare s_smx_synchro (because of the union):
  if we could fix this in the future (by using a custom code for
  comparing s_smx_synchro) we might have more stable state comparison
  (and less explored states).
*** Work Planned [0/0]
** Week 05 april 2015
*** Things done
- Moved the liveness code in multi-process.
- Moved the comm determinism code in multi-process (wip, broken).
*** Work Planned [2/2]
**** DONE Fix the comm determinism to work in multi-process
**** DONE Kill the single process path and cleanup
This will lead to a huge simplification of the code. Then, it will be
possible to split the code in different directories (for the MCed, for
the MCed, for both).
** Week 13 april 2015
*** Things done
- Finished to move all the code in split process.
- WIP cleanup of the code:
  - remove the entangled MCed/MCer code;
  - switch some parts to C++ (classes, methods, STL).
*** Work Planned [1/2]
**** DONE Remove the heap juggling (wip)
**** WIP C++ification
** Week 27 april 2015
*** Things done
- Remove the multiple heap, heap juggling code.
- First Simgrid Community Tuesday: ðŸ˜€
  - Fix test-smpi-mpich3-attr-raw.
  - Disable the test msg-exception-thread (which cannot pass on most machines).
  - Fix gforge issue #1156, "xbt-dict regresion test missing when keys are not null-terminated"
  - Investigate #18874 "memory leak using the Java binding" (looks normal)
*** Questions
- Now that we do not need to use multiple heaps anymore we might use
  another malloc implementation (jemalloc?) as long as we are able to
  have a look at its structure. Is there any off-the-shelf (more
  efficient) malloc implementation which can expose the relevant
  information to the caller?
** Week 7 may 2015
*** Things done
- Fix the build on the CI servers.
- Fix the tests on the CI servers.
** Week 25 may 2015
*** Things done
- Code cleanup and C++-ification of some parts of the code.
  - Replaced the C-based virtual-tables with C++ ones by making
    Process, Snapshot, AddressSpace classes.
- Fix some bugs found in the process.
- Fix build/test errors on the CI machines.
- Add documentation on the model-checker.
*** Work Planned [0/3]
**** TODO Rerun previous experiments (from the papers)
In order to see how things evolved (results, bugs, performance) with
the modifications:
 - split process;
 - SMPI mutex on messages.
**** TODO Investigation the barrier bug
See what we can infer from the model-checker?
**** TODO Use ISP and compare it with simgrid
** Week 1 june 2015
*** Things done
- Update MC 101
- Boost.Context integration
- Fix CI erros (clang, etc.)
- Minor usability enchancements to the model-checker
  - Do not abort;
  - Add more informations about what's happening (do not silentely terminate);
  - Enable record/replay in liveness mode (it was only working in safety mode).
- Read about ISP and DMA (DAMPI?).
** Week 15 june 2015
*** Things done
- Fix compilation/continuous integration on MacOS X
- Fix continuous integration in general
- Boost contexts
  - add parallel execution
  - add newer versions of boost
- Fix the kademlia bug: it was related non-synchronized concurrent
  modification.
- (wip) Working on the on-off test and the related bugs.
*** Work Planned [0/1]
**** DONE Fix the on-off code
** Week 22 june 2015
*** Things done
- Fix the segfaults in simterpose. They were related to buggy handling
  of file descriptors:
  - there was a maximum FD value that could be handled by the code;
  - using a FD value higher than this would use pointer to random memory area;
  - valgtind uses FD in the higher range (65535 and below) for its own
    purpose which triggered the bug;
- Some other enhancements in Simterpose.
- (wip) Working on the on-off test and the related bugs
  (https://github.com/mquinson/simgrid/issues/7): should we fix this
  at the SURF, SIMIX error, SIMIX exception layer?
** Week 20 june 2015
*** Things done
**** Read papers about ISP and DAMPI
- ISP"(In-situ Partial Order),
  http://formalverification.cs.utah.edu/ISP-Release/)
- DAMPI (Distributed Analyzer for MPI,
  https://github.com/soarlab/DAMPI)
- They both focus exclusively on MPI applications.
- Supposed to be push-button.
- Use the PMI (ISP) or P^nMPI (DAMPI) interface to plug dynamic
  verification in an existing MPI implementation (MPICH2, OpenMPI).
- ISP uses a centralized scheduler.
- DAMPI uses a decentralized scheduling which leads to a better
  usage of the cluster.
- POE (Partial Order Reduction avoiding Elusive interleavings)
- Use the knowledge of collective functions to avoid the
  combinatorial (N!) explosion when traversing a collective.
- Rexecution from MPI_Init().
- POE: how does it compare wrt POR, DPOR?
- GUI integration
  (http://formalverification.cs.utah.edu/ISP-Eclipse/):
  - visualisation of matching MPI calls (MPI_Send and MPI_Recv)
**** Fixed the first half of the host-on-off bug.
*** Work Planned [1/1]
**** DONE Reference count bug in the host-on-off test
- See https://github.com/mquinson/simgrid/issues/7.
- The comm object is decremented 3Ã— but has only been incremented 2Ã—.
** Week 6 july 2015
*** Things done
**** Bibliography
***** Dwymer et al specification patterns
- Papers:
 - Patterns in property specifications for finite-state verification (Dwymer et al)
 - Property specification patterns for finite-state verification (Dwymer et al)
- Website with all the details of the patterns:
 - http://patterns.projects.cis.ksu.edu/
- Specification of temporal properties abstracted from the lower level
  language (LTL, CTL, QRE, GIL, INCA, ACTL, â€¦).
- Scope, when we want to check the property
  - Global
  - BEfore Q
  - After Q
  - Before Q and R
  - After Q and R
- Patterns
  - Precedence (S precedes P)
  - Absence
  - Universality
  - Existence
  - Bounded existence
  - Follows
  - Chaine Precedence
  - Chain Response
- For each element of (scopeÃ—patternÃ—language), a mapping is defined
  manually.
***** A Compositional Automata-based Semantics for Property Patterns (Castillos et al)
- Dwymer scope/pattern language:
  - lack of composability
  - lack of extensibility
  - combinatorial explosion (scopeÃ—pattern)
- Proposition:
  - composable scope/pattern definition based on BÃ¼chi automatons
- Pattern:
  - BÃ¼chi automaton where the transitions are labeled with state propositions
- Scope:
  - special BÃ¼chi automaton with a "composition state" cs representing
    the pattern
  - the cs can be an accepting state
- Define a composition operation between the pattern automaton and the
  scope automaton.
**** Fixed the host-on-off bug
At last!
**** Fixing bug (CI/release)
We have green lights on Linus without Modelchecking:
- Some issues with MacOS X and FreeBSD.
- Model-Checker:
  - Use new systcall/feature from the kernel not available on some OSes.
  - Seems broken on 32 bit.
  - Some weird bugs show up on unrelated tests when MC is compiled-in
    (for example test-smpi-mpich3-thread-f90).
**** Client/server (HTTP) SimGrid
- Which design?
  - Remote MSG/SMPI?
  - based on replay with a Simgrid/server-side plugin?
  - As a user, I probably don't want to write a plugin. Especially if
    I'm programming in Java and have to write the plugin in C or C++.
- Synchronization between the application threads, HTTPd thread(s),
  the in-SimGrid stub contexts and Maestro.
  - Communication bewteen the subs and the HTTPd threds using native
    system synchronization techniques. I think, it should be
    allright :)
  - At some point we could get rid of the
- We don't want to link against native libsimgrid in the client
  (especially if it's a Java/Python/Ruby/Lua/JavaScript application)
  so the API must be simple.
** Week 13 july 2015
*** Things done
- Fix MC for 32 bit.
- Add some documentation for release.
- Code cleanup in the MC:
  - Remove useless bits;
  - C++ification of some code.
** Week 20 july 2015
*** Things done
- Cleanup, C++ification of the MC codebase.
- Prepration for release (fix bugs, fix CI)
** Week 27 july 2015
*** Things done
- Cleanup, C++ification of the MC codebase.
- Prepration for release (fix bugs, fix CI)
- Some ISP Umpire test do not finish anymore:
  - Since 51a5d2e12715401658d5416f621fb5c89a9b5278 Add a mutex to lock access to the SMPI mailboxes
  - Reverting this commit feature fixes the test on master.
  - I'm not sure why this happens yet.
  - However, we should probably handle SIMCALL_MUTEX_* in the MC (?):
    they are supposed to influence the message ordering and they are
    currently ignored in the interleavings.
  - Same for SIMCALL_COND_*, SIMCALL_SEM_*â€¦
  - Lot of work do do?
  - We should probably abort on simcalls by default an then add the
    proper behaviour for simcalls we know we handle in MC: this would
    avoid handling simcalls incorrectly.
** Week 27 august 2015
*** Things done
- Fix broken umpire test (no-erro2 and friends):
  - they did not terminate anymore;
  - regression introduced by the locks around the SMPI messages (see
    smpi_base.c and commit 51a5d2e12715401658d5416f621fb5c89a9b5278);
  - MUTEX_LOCK simcall does not seem to be handled correctly by DPOR
    (see the mutex-handling tests) and those tests are using DPOR (it
    is used by default);
  - I change the code of SMPI to avoid the lock when the
    smpi/async_small_thres threshold is 0: it should not be necessary
    in this case anyway. This fixes the broken umpire tests.
- Fixing the handling of SIMCALL_MUTEX_LOCK in DPOR:
  - Using DPOR with a dummy dependency function D(t,t-) = true (with
    the mutex-handling test ) visits more states than without
    reduction (!): there's something wrong here.
  - SIMCALL_MUTEX_TRYLOCK is not handled by the MC (it is not
    considered visible);
  - SIMCALL_MUTEX_UNLOCK is considered non-visible: is this really
    correct?
*** Work Planned [1/2]
**** CANCELED Try a MacOS X MC port
Test how MMU based snapshoting work (probably not so well).
**** TODO Mutex-aware DPOR
** Week 31 August 2015
*** Things done
Tried the MacOS X prot:
- not in good shape;
  - the plan was to avois spending to much time on this and drop it if
    it was taking too much time;
  - therefore, we should drop this;
- many small issues fixed;
- DWARF support:
  - libdw is currently used but only reads DWARF from ELF;
  - libdwarf can handle DWARF section from any kind of file;
  - however the API of libdwarf and libdw is completely incompatible;
  - ~700 LoC of DWARF processing needs to be rewritten&;
  - I tries to make a compatibility layer but it was a mess, much
    simpler to rewrite the code;
- custom malloc:
  - there is special support for this in MacOS X;
  - by overriding the function pointers in the default zone we should
    be able to achieve this;
  - currently not working however;
- MacOS X issues:
  - libtool is not willing to generate shared objects files (for
    libelf and libdwarf);
  - currently the debugger are not willing to cooperate with me :)
- Not touched yet;
  - get the list of VMAs
  - implement CoW snapshot
*** Work Planned [0/1]
**** TODO Fix Jenkins
**** TODO Work on ISP testsuite
* Abbreviations
 - MC: model-checking, model-check
 - MCer: model-checker
 - MCed: model-checked application
